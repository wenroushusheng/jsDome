const FakePromise = (function () {

    // 构造器
    function FakePromise(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError(`當前提案的參數： ${executor} 不是一個函數`);
      }
      this._init(executor);
    }

    let status = {
      PENDING: 'pending',
      FULFILLED: 'fulfilled',
      REJECTED: 'reject'
    };

    protoMixin(FakePromise);
    staticMixin(FakePromise);

    return FakePromise;

    // 原型方法
    function protoMixin(FakePromise) {

      // 原型方法
      FakePromise.prototype._init = function (executor) {
        this.value = null;
        this.state = status.PENDING;
        this.onFulfilledCbs = [];
        this.onRejectedCbs = [];

        try {
          executor(resolve(this), reject(this));
        } catch (e) {
          reject(this)(e);
        }
      }
      FakePromise.prototype.then = function (fulfilledCb, rejectedCb) {

        [fulfilledCb, rejectedCb] = defaulfThenCb(fulfilledCb, rejectedCb);
        // 添加回调函数，并且返回一个新的提案
        let newPromiseObj = getNewPromise();
        // 此处需要判断提案的状态
        const val = this.value,
          fulAry = this.onFulfilledCbs,
          rejAry = this.onRejectedCbs;

        const statusObj = {
          [status.FULFILLED]() {
            runCb(fulfilledCb, val, newPromiseObj);
          },
          [status.REJECTED]() {
            runCb(rejectedCb, val, newPromiseObj);
          },
          [status.PENDING]() {
            fulAry.push(val =>
              runCb(fulfilledCb, val, newPromiseObj));
            rejAry.push(reason =>
              runCb(rejectedCb, reason, newPromiseObj));
          }
        };

        statusObj[this.state]();
        return newPromiseObj.promise;
      }
      FakePromise.prototype.catch = function (onRejected) {
        return this.then(null, onRejected);
      }
    }
    // 静态成员
    function staticMixin(FakePromise) {

      FakePromise.defer = getNewPromise;
      FakePromise.reject = v => new FakePromise((y, n) => n(v));
      FakePromise.resolve = function (v) {
        // 需要展开提案值，暂时先用then去处理
        //  return  new FakePromise(y => y(v)).then();
        let deferPromiseObj = getNewPromise();
       resolveValue(v, deferPromiseObj);
       return deferPromiseObj.promise
      }
      FakePromise.none = function (iterable) {
        return new FakePromise((resolve, reject) => {
          let index = 0;
          for (const promise of iterable) {
            const currentIndex = index;
            promise.then(
              v => {
                if (isEnd) { return; }
                isEnd = true;
                resolve(v);
              },
              e => {
                if (isEnd) { return; }
                reject[currentIndex] = e;
                elementCount++;
                (elementCount == result.length) && reject(result);
              }
            );
            index++;
          }

          if (index == 0) {
            resolve([]);
          }

          let elementCount = 0;
          let isEnd = false;
          const result = new Array(index);
        });
      }
      FakePromise.last = function (iterable) {
        return new FakePromise((resolve, rejecr) => {
          let index = 0;
          let elementCount = 0;

          for (const promise of iterable) {
            promise.then(
              v => {
                elementCount++;
                (index == elementCount) && resolve(v);
              },
              e => {
                elementCount++;
                (index == elementCount) && rejecr(e);
              }
            );
            index++;
          }

          if (index == 0) {
            resolve();
          }
        });

      }
      FakePromise.first = function (iterable) {
        return new FakePromise(function (resolve, reject) {
          let index = 0;
          for (const promise of iterable) {
            promise.then(v => {
              if (isEnd) { return; }
              isEnd = true;
              resolve(v);
            });
            index++;
          }

          if (index == 0) {

          }

          let isEnd = false;

        });
      }
      FakePromise.race = function (iterable) {
        return new FakePromise((resolve, reject) => {
          let index = 0;
          for (const promise of iterable) {
            promise.then(
              (value) => {
                if (isEnd) { return; }
                isEnd = true;
                resolve(value);
              },
              (err) => {
                if (isEnd) { return; }
                isEnd = true;
                reject(err);
              });
            index++;
          }

          if (index === 0) {
            // 該提案永遠不會有結果
          }
          let isEnd = false;

        });
      }
      FakePromise.all = function (iterable) {
        return new FakePromise((resolve, reject) => {
          let index = 0;

          for (const promise of iterable) {
            const currentIndex = index;
            promise.then(
              (value) => {
                if (anErrorOccurred) { return; }
                result[currentIndex] = value;
                elementCount++;
                if (elementCount === result.length) {
                  resolve(result);
                }
              },
              (err) => {
                if (anErrorOccurred) { return; }
                anErrorOccurred = true;
                reject(err);
              });
            index++;
          }

          if (index === 0) {
            resolve([]); // 該提案會立即變為通過狀態
            return;
          }

          let elementCount = 0;
          let anErrorOccurred = false;
          const result = new Array(index);
        });
      }
    }

    // 工具函数
    function runCb(ThenCb, oldPromiseVal, promiseObj) {
      const microTask = getMicroTask();
      microTask(() => {
        try {
          resolveValue(
            ThenCb(oldPromiseVal),
            promiseObj,
          );
        } catch (e) {
          reject(promiseObj.promise)(e);
        }
      });
    }
    function resolveValue(value, newPromiseObj) {
      const
        reject = newPromiseObj.reject,
        resolve = newPromiseObj.resolve,
        promise = newPromiseObj.promise,
        called = false;

      if (promise === value) {
        reject(new TypeError('检测到promise的死循环'));
      }
      // 使用策略修改
      // 提案，鸭子提案，普通值
      if (value instanceof FakePromise) {
        if (value.state === status.PENDING) {
          value.then(
            v => resolveValue(v, newPromiseObj),
            e => reject(e)
          );
        } else {
          value.then(resolve, reject);
        }
        return;
      }

      if ((value != null && (typeof value == "object")) ||
        (typeof value == "function")) {
        try {
          const then = value.then;
          if (typeof then == "function") {
            then.call(
              value,
              v => run(resolveValue, v, newPromiseObj),
              e => run(reject, e)
            );
          } else {
            resolve(value);

          }
        } catch (e) {
          run(reject, e);
        }
        return;
      }

      return resolve(value, false);

      function run(cb, ...args) {
        if (called) return;
        called = true;
        cb(...args);
      }
    }
    function getNewPromise() {
      let defer = {};
      defer.promise = new FakePromise((resolve, reject) => {
        defer.resolve = resolve;
        defer.reject = reject;
      });
      return defer;
    }
    function stateChange(promise, state, value) {
      if (promise.state === status.PENDING) {
        promise.state = state;
        promise.value = value;
        getCbAry(state).forEach(fn => fn(value));
        promise.onFulfilledCbs.length = 0;
        promise.onRejectedCbs.length = 0;
        return;

        function getCbAry(state) {
          let CbAry = (state === status.FULFILLED);
          return CbAry ? promise.onFulfilledCbs : promise.onRejectedCbs;
        }
      }
    }

    function resolve(promise) {
      return (value, valueResolve = true) => {
        valueResolve && resolveValue(value, { promise, reject: reject(promise), resolve: resolve(promise) });

        stateChange(promise, status.FULFILLED, value);
      }
    }
    function reject(promise) {
      return reason => stateChange(promise, status.REJECTED, reason);
    }
    function defaulfThenCb(fn1, fn2) {
      return [
        (typeof fn1 === "function") ?
          fn1 :
          v => v,
        (typeof fn2 === "function") ?
          fn2 :
          reason => { throw reason; }
      ];
    }
    function getMicroTask() {
      return fn => setTimeout(() => fn(), 0);
    }

  })();


  let pro1 = new FakePromise((resolve, reject) => {
    resolve(1)
    reject(99999999);
  }).then(
    value =>
      new FakePromise((resolve) => {
        resolve(new FakePromise((resolve, reject) => {
          reject('333')
        })
        )
      })).then(
        value => {
          console.log('对then 2 value:', value)
        },
        reason => {
          console.log('错::', reason)
        });



  var p1 = new Promise(function (resolve, reject) {
    resolve(new Promise(res => res('resolve')));
  });

  var p2 = new Promise(function (resolve, reject) {
    // 将resolve实参promise的状态变为自己的状态，将实参promise的值变为自己的值
    resolve(new Promise((res, rej) => { rej('reject') }));
  });

  var p3 = new Promise(function (resolve, reject) {
    reject(new Promise(res => res('resolve')));
  });

  p1.then(
    function fulfilled(value) { console.log('p1 fulfilled: ' + value); },
    function rejected(err) { console.log('p1 rejected: ' + err); }
  );

  p2.then(
    function fulfilled(value) { console.log('p2 fulfilled: ' + value); },
    function rejected(err) { console.log('p2 rejected: ' + err); }
  );

  p3.then(
    function fulfilled(value) { console.log('p3 fulfilled: ' + value); },
    function rejected(err) { console.log('p3 rejected: ' + err); }
  );
